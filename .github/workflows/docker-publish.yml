name: Build and publish Docker Image if a new Github release was created

on:
  release:
    types: [created]
  workflow_dispatch: # enable manual triggering

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history and tags

      - name: Find latest 'server' tag
        id: find_tag
        run: |
          # Find the latest tag that starts with 'server'
          LATEST_SERVER_TAG=$(git tag -l "server*" --sort=-creatordate | head -n 1)
          
          if [ -z "$LATEST_SERVER_TAG" ]; then
            echo "No tags starting with 'server' found."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Found latest server tag: $LATEST_SERVER_TAG"
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "tag=$LATEST_SERVER_TAG" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Skip build if no server tag found
        if: steps.find_tag.outputs.skip == 'true'
        run: echo "Skipping build because no tag starting with 'server' was found."

      - name: Check out the repo
        if: steps.check_tag.outputs.skip == 'false'
        uses: actions/checkout@v2

      - name: Set up QEMU
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sanitize ref name
        id: sanitize
        if: steps.check_tag.outputs.skip == 'false'
        run: echo "SANITIZED_REF_NAME=$(echo $GITHUB_REF_NAME | tr '/' '-' | tr '+' '-')" >> $GITHUB_OUTPUT

      - name: Build and push
        if: steps.check_tag.outputs.skip == 'false'
        uses: docker/build-push-action@v2
        with:
          context: ./app/
          file: ./app/server/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            plandexai/plandex-server:${{ steps.sanitize.outputs.SANITIZED_REF_NAME }}
            plandexai/plandex-server:latest
